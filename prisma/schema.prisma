generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  clerkId            String             @unique
  email              String             @unique
  firstName          String?
  lastName           String?
  avatar             String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  country            String?            @default("Colombia")
  birthDate          DateTime?
  gender             String?
  occupation         String?
  bio                String?
  website            String?
  socialLinks        Json?
  preferences        Json?
  isActive           Boolean            @default(true)
  timezone           String?
  language           String             @default("es")
  emailNotifications Boolean            @default(true)
  pushNotifications  Boolean            @default(true)
  marketingEmails    Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  certificates       Certificate[]
  courseReviews      CourseReview[]
  instructorCourses  Course[]           @relation("InstructorCourses")
  enrollments        Enrollment[]
  lessonProgress     LessonProgress[]
  sessionActivities  SessionActivity[]
  stores             Store[]            @relation("StoreOwner")
  studyStreak        StudyStreak?
  achievements       UserAchievement[]
  subscriptions      UserSubscription[]
  videoAnalytics     VideoAnalytics[]

  @@map("users")
}

model Store {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  description  String?
  logo         String?
  banner       String?
  category     String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  phone        String?
  email        String?
  website      String?
  socialLinks  Json?
  isActive     Boolean   @default(true)
  isVerified   Boolean   @default(false)
  rating       Float     @default(0)
  reviewCount  Int       @default(0)
  productCount Int       @default(0)
  followers    Int       @default(0)
  ownerId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]
  owner        User      @relation("StoreOwner", fields: [ownerId], references: [id])

  @@map("stores")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String
  description   String?
  price         Float
  comparePrice  Float?
  cost          Float?
  sku           String?
  barcode       String?
  trackQuantity Boolean  @default(true)
  quantity      Int      @default(0)
  weight        Float?
  images        String[]
  category      String?
  tags          String[]
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  storeId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  store         Store    @relation(fields: [storeId], references: [id])

  @@unique([storeId, slug])
  @@map("products")
}

model UserSubscription {
  id              String    @id @default(cuid())
  type            String
  status          String    @default("active")
  startDate       DateTime  @default(now())
  endDate         DateTime?
  autoRenew       Boolean   @default(false)
  paymentMethod   String?
  amount          Float?
  currency        String    @default("COP")
  billingInterval String?
  metadata        Json?
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])

  @@map("user_subscriptions")
}

model Course {
  id                String            @id @default(cuid())
  title             String
  description       String
  slug              String            @unique
  thumbnail         String?
  price             Float             @default(0)
  duration          String?
  level             Level             @default(BEGINNER)
  status            CourseStatus      @default(DRAFT)
  tags              String[]
  language          String            @default("es")
  instructorId      String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  publishedAt       DateTime?
  certificates      Certificate[]
  reviews           CourseReview[]
  instructor        User              @relation("InstructorCourses", fields: [instructorId], references: [id])
  enrollments       Enrollment[]
  lessons           Lesson[]
  sessionActivities SessionActivity[]

  @@map("courses")
}

model Lesson {
  id                String            @id @default(cuid())
  title             String
  description       String?
  slug              String
  order             Int               @default(0)
  duration          Int?
  bunnyVideoId      String?
  bunnyLibraryId    String?
  bunnyThumbnail    String?
  bunnyPlaybackUrl  String?
  content           String?
  resources         Json?
  isPreview         Boolean           @default(false)
  isRequired        Boolean           @default(true)
  courseId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  progress          LessonProgress[]
  course            Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sessionActivities SessionActivity[]
  videoAnalytics    VideoAnalytics[]

  @@unique([courseId, slug])
  @@map("lessons")
}

model Enrollment {
  id          String           @id @default(cuid())
  status      EnrollmentStatus @default(ACTIVE)
  progress    Float            @default(0)
  userId      String
  courseId    String
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?
  course      Course           @relation(fields: [courseId], references: [id])
  user        User             @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id             String    @id @default(cuid())
  progress       Float     @default(0)
  watchedSeconds Int       @default(0)
  isCompleted    Boolean   @default(false)
  lastPosition   Int       @default(0)
  userId         String
  lessonId       String
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  updatedAt      DateTime  @updatedAt
  lesson         Lesson    @relation(fields: [lessonId], references: [id])
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model CourseReview {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("course_reviews")
}

model VideoAnalytics {
  id                 String   @id @default(cuid())
  totalWatchTime     Int      @default(0)
  percentageWatched  Float    @default(0)
  completionRate     Float    @default(0)
  pauseCount         Int      @default(0)
  seekCount          Int      @default(0)
  qualityChanges     Int      @default(0)
  speedChanges       Int      @default(0)
  replayCount        Int      @default(0)
  averageSessionTime Int      @default(0)
  peakEngagementTime Int      @default(0)
  dropOffPoints      Json     @default("[]")
  engagementHeatmap  Json     @default("{}")
  preferredQuality   String   @default("auto")
  preferredSpeed     Float    @default(1.0)
  averageVolume      Float    @default(1.0)
  fullscreenUsage    Int      @default(0)
  deviceType         String?
  browserInfo        String?
  screenResolution   String?
  connectionSpeed    String?
  userId             String
  lessonId           String
  sessionStart       DateTime @default(now())
  lastActivity       DateTime @updatedAt
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  lesson             Lesson   @relation(fields: [lessonId], references: [id])
  user               User     @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@map("video_analytics")
}

model UserAchievement {
  id            String      @id @default(cuid())
  achievementId String
  userId        String
  progress      Float       @default(0)
  isCompleted   Boolean     @default(false)
  unlockedAt    DateTime?
  notifiedAt    DateTime?
  createdAt     DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Achievement {
  id               String                @id @default(cuid())
  title            String
  description      String
  icon             String
  category         AchievementCategory
  targetValue      Int                   @default(1)
  isHidden         Boolean               @default(false)
  difficulty       AchievementDifficulty @default(EASY)
  points           Int                   @default(10)
  condition        Json
  prerequisites    String[]
  isActive         Boolean               @default(true)
  order            Int                   @default(0)
  createdAt        DateTime              @default(now())
  userAchievements UserAchievement[]

  @@map("achievements")
}

model StudyStreak {
  id                 String    @id @default(cuid())
  userId             String    @unique
  currentStreak      Int       @default(0)
  longestStreak      Int       @default(0)
  lastStudyDate      DateTime?
  totalStudyDays     Int       @default(0)
  totalStudyTime     Int       @default(0)
  averageSessionTime Int       @default(0)
  dailyGoalMinutes   Int       @default(30)
  weeklyGoalDays     Int       @default(5)
  todayStudyTime     Int       @default(0)
  weekStudyDays      Int       @default(0)
  isGoalMet          Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@map("study_streaks")
}

model SessionActivity {
  id           String       @id @default(cuid())
  userId       String
  lessonId     String?
  courseId     String?
  activityType ActivityType
  duration     Int          @default(0)
  progress     Float        @default(0)
  deviceInfo   Json         @default("{}")
  location     String?
  metadata     Json         @default("{}")
  startedAt    DateTime     @default(now())
  endedAt      DateTime?
  createdAt    DateTime     @default(now())
  course       Course?      @relation(fields: [courseId], references: [id])
  lesson       Lesson?      @relation(fields: [lessonId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("session_activities")
}

model Certificate {
  id               String                    @id @default(cuid())
  certificateCode  String                    @unique
  title            String
  description      String?
  issueDate        DateTime                  @default(now())
  validUntil       DateTime?
  totalHours       Int                       @default(0)
  completionRate   Float                     @default(100)
  finalScore       Int?
  templateId       String                    @default("default")
  customData       Json?
  pdfUrl           String?
  imageUrl         String?
  status           CertificateStatus         @default(ACTIVE)
  isVerified       Boolean                   @default(true)
  issuerName       String                    @default("Academia Mercado Local Caldas")
  issuerLogo       String?
  signatureImage   String?
  userId           String
  courseId         String?
  shareableLink    String?
  verificationHash String?
  downloadCount    Int                       @default(0)
  sharedCount      Int                       @default(0)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  verifications    CertificateVerification[]
  course           Course?                   @relation(fields: [courseId], references: [id])
  user             User                      @relation(fields: [userId], references: [id])

  @@map("certificates")
}

model CertificateTemplate {
  id              String            @id @default(cuid())
  name            String
  description     String?
  layout          CertificateLayout @default(LANDSCAPE)
  colorScheme     String            @default("#1e40af,#3b82f6,#60a5fa")
  fontFamily      String            @default("Inter")
  backgroundImage String?
  showLogo        Boolean           @default(true)
  showSignature   Boolean           @default(true)
  showQRCode      Boolean           @default(true)
  showBorder      Boolean           @default(true)
  titlePosition   Json              @default("{\"x\": 50, \"y\": 30}")
  logoPosition    Json              @default("{\"x\": 10, \"y\": 10}")
  textAlignment   String            @default("center")
  htmlTemplate    String?
  cssStyles       String?
  isActive        Boolean           @default(true)
  isDefault       Boolean           @default(false)
  category        TemplateCategory  @default(COURSE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("certificate_templates")
}

model CertificateVerification {
  id               String      @id @default(cuid())
  certificateId    String
  verifierIP       String?
  verifierLocation String?
  verificationDate DateTime    @default(now())
  userAgent        String?
  isValid          Boolean     @default(true)
  verificationCode String      @unique
  certificate      Certificate @relation(fields: [certificateId], references: [id])

  @@map("certificate_verifications")
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum AchievementCategory {
  LEARNING
  ENGAGEMENT
  COMPLETION
  SOCIAL
  SPECIAL
}

enum AchievementDifficulty {
  EASY
  MEDIUM
  HARD
  LEGENDARY
}

enum ActivityType {
  VIDEO_WATCH
  LESSON_COMPLETE
  COURSE_START
  COURSE_COMPLETE
  DOWNLOAD_RESOURCE
  QUIZ_ATTEMPT
  FORUM_POST
  PEER_INTERACTION
}

enum CertificateStatus {
  ACTIVE
  REVOKED
  EXPIRED
  PENDING
}

enum CertificateLayout {
  LANDSCAPE
  PORTRAIT
  SQUARE
}

enum TemplateCategory {
  COURSE
  ACHIEVEMENT
  PARTICIPATION
  SKILL
  CUSTOM
}
