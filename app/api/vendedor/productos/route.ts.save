import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/lib/auth';
import { db } from '@/lib/db';

// GET - Obtener productos del vendedor
export async function GET(req: NextRequest) {
  try {
    const session = await auth();
    
if (!session?.user) {
      return NextResponse.json(
        { error: 'No autorizado' },
        { status: 401 }
      );
    }

    const products = await db.product.findMany({
      where: {
        vendorId: session.user.id
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    return NextResponse.json({
      success: true,
      products
    });
  } catch (error) {
    console.error('Error al obtener productos:', error);
    return NextResponse.json(
      { error: 'Error al obtener productos' },
      { status: 500 }
    );
  }
}

// POST - Crear nuevo producto
export async function POST(req: NextRequest) {
  try {
    const session = await auth();
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'No autorizado' },
        { status: 401 }
      );
    }

    const body = await req.json();
    
    // Generar slug desde el nombre
    const slug = body.name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');

    const product = await db.product.create({
      data: {
        vendorId: session.user.id,
        categoryId: body.categoryId || 'EMPRESARIAL',
        name: body.name,
        slug: `${slug}-${Date.now()}`,
        description: body.description,
        price: parseFloat(body.price),
        comparePrice: body.comparePrice ? parseFloat(body.comparePrice) : null,
        images: JSON.stringify(body.images || []),
        stock: body.stock ? parseInt(body.stock) : null,
        sku: body.sku || null,
        weight: body.weight ? parseFloat(body.weight) : null,
        dimensions: body.dimensions ? JSON.stringify(body.dimensions) : null,
        tags: body.tags ? JSON.stringify(body.tags.split(',').map((t: string) => t.trim())) : null,
      }
    });

    return NextResponse.json({
      success: true,
      product
    });
  } catch (error) {
    console.error('Error al crear producto:', error);
    return NextResponse.json(
      { error: 'Error al crear producto' },
      { status: 500 }
    );
  }
}
